<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:int-ws="http://www.springframework.org/schema/integration/ws"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cloud="http://schema.cloudfoundry.org/spring"
	xmlns:int-event="http://www.springframework.org/schema/integration/event"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.1.xsd
		http://www.springframework.org/schema/integration/ws http://www.springframework.org/schema/integration/ws/spring-integration-ws.xsd
		http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
	    http://www.springframework.org/schema/integration/jdbc http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc.xsd
	    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
	    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	    http://schema.cloudfoundry.org/spring http://schema.cloudfoundry.org/spring/cloudfoundry-spring.xsd
	    http://www.springframework.org/schema/integration/event http://www.springframework.org/schema/integration/event/spring-integration-event-2.1.xsd">
	    

	<context:component-scan base-package="ie.cit.cloud.mvc" />

	<!-- infrastructure setup -->
	<bean id="jsonMessageConverter" class="org.springframework.amqp.support.converter.JsonMessageConverter"/>
	<bean id="xmlMessageConverter" class="org.springframework.amqp.support.converter.SerializerMessageConverter"/>
<!-- 
<bean id="marhsallingMessageConverter" class="org.springframework.amqp.support.converter.MarshallingMessageConverter"/>
 -->

<!-- 
	<bean id="messageConverter" class="org.springframework.amqp.support.converter.SimpleMessageConverter">
	    <property name="messageConverter">
	        <map>
	            <entry key="application/json" value-ref="jsonMessageConverter"/>
	            <entry key="application/xml" value-ref="textMessageConverter"/>
	        </map>
	    </property>
	    <property name="fallbackConverter" ref="xmlMessageConverter"/>
	</bean>
	-->
	<!-- 
	<bean id="MarshallingMessageConverter" class="org.springframework.amqp.support.converter.MarshallingMessageConverter" 
 -->
<!-- 
message-converter="jsonMessageConverter"
message-converter="MarshallingMessageConverter"


 <bean id="template" class="org.springframework.amqp.rabbit.core.RabbitTemplate"> 
 		<property name="connectionfactory" ref="rabbitConnFactory" /> 
        <property name="routingKey" value="test.queue"/> 
        <property name="queue" value="junitqueue"/> 
        <property name="messageConverter" ref="messageConverter" /> 
</bean> 
  -->

 	<rabbit:connection-factory id="connectionFactory" />
		<rabbit:template id="amqpTemplate" 
		routing-key=""
		connection-factory="connectionFactory" />
	
		<rabbit:admin connection-factory="connectionFactory" />
		<rabbit:queue name="epos.loyalty"  />
		<rabbit:queue name="epos.creditcard" />
		<rabbit:queue name="epos.promotion" />
		<rabbit:queue name="epos.voucher" />
		<rabbit:queue name="epos.backup.log" />
	
	<!-- setup exchange/queue infrastructure, simple binding without routing key -->
	<rabbit:fanout-exchange name="epos.main.exchange.fanout">
		<rabbit:bindings>
			<rabbit:binding queue="epos.loyalty"  />
			<rabbit:binding queue="epos.creditcard"  />
			<rabbit:binding queue="epos.promotion"  />
			<rabbit:binding queue="epos.voucher"  />
		</rabbit:bindings>
	</rabbit:fanout-exchange>
	
	<rabbit:direct-exchange name="epos.direct.exchange.log">
			<rabbit:bindings>
				<rabbit:binding queue="epos.backup.log"  />
			</rabbit:bindings>
	</rabbit:direct-exchange>

	<int:annotation-config/>
	
	<!-- sending messages -->
	<int:channel id="toRabbit" />
	<int-amqp:outbound-channel-adapter amqp-template="amqpTemplate"
		exchange-name="epos.main.exchange.fanout" channel="toRabbit"
		routing-key="epos.main.exchange.fanout"
		mapped-request-headers="*" 
		/>

	<!-- sending messages -->
	<int:channel id="toLogChannel" />
	<int-amqp:outbound-channel-adapter amqp-template="amqpTemplate"
		exchange-name="epos.direct.exchange.log" channel="toLogChannel"
		mapped-request-headers="message_*" />

	<!-- receiving messages from loyalty queue -->
	<int:channel id="fromRabbit.epos.loyalty"/>
	<int-amqp:inbound-channel-adapter 
	id="fromRabbit_loyalty_adapter"
	channel="fromRabbit_loyalty" 
	queue-names="epos.loyalty" 
	connection-factory="connectionFactory"   
	mapped-request-headers="*"	
	error-channel="eventErrorChannel"
	message-converter="jsonMessageConverter" 
	/>
		
	<!-- receiving messages from queue and send to channel-->
	<!--
	
	MarshallingMessageConverter
	http://static.springsource.org/spring-integration/reference/html/amqp.html 
	 -->
<!-- 
	<int:channel id="fromRabbit.epos.creditcard"/>
	<int-amqp:inbound-channel-adapter 
	id="fromRabbit_creditcard_adapter"
	channel="aggregateChannel" 
	queue-names="epos.creditcard" 
	connection-factory="connectionFactory" 
	error-channel="eventErrorChannel"
	mapped-request-headers="*"	 
	/>
	
	
		
	 -->
	 
	 <!-- 
	 <int:payload-serializing-transformer input-channel="objectsIn" output-channel="bytesOut"/>

 <int:payload-deserializing-transformer input-channel="bytesIn" output-channel="objectsOut"/>
	  -->
	 <int:object-to-json-transformer input-channel="toRabbit"/>
	<int:channel id="fromRabbit_loyalty"/>
	<int-ws:outbound-gateway id="loyaltyGateway"
		request-channel="fromRabbit_loyalty"
		reply-channel="output" 
		uri="http://loyalty.cloudfoundry.com/loyalty/baskets"
		marshaller="marshaller"
		unmarshaller="marshaller"
		/>
		
	
	<!-- 
	**** AGGREGATOR CHANNEL WILL GO HERE ****
		EXAMPLE from KRAMS
		<aggregator input-channel="aggregateChannel"
		  output-channel="wsChannel" ref="productAggregatorBean" method="send"
		  release-strategy="productAggregatorBean" release-strategy-method="release"
		  correlation-strategy="productAggregatorBean" correlation-strategy-method="correlate"
		  send-partial-result-on-expiry="false" />
		  	
		  <beans:bean id="productAggregatorBean" class="org.krams.tutorial.si.ProductAggregator" />
		
			<int:aggregator input-channel="aggregateChannel"
		  output-channel="output" ref="amqpMessageAggregator" method="send"
		  release-strategy="amqpMessageAggregator" release-strategy-method="release"
		  correlation-strategy="amqpMessageAggregator" correlation-strategy-method="correlate"
		  send-partial-result-on-expiry="false" />
		  
		  release-strategy-expression="size() == 2"
		
	
	  <bean id="amqpMessageAggregator" class="ie.cit.cloud.mvc.service.amqp.amqpMessageAggregator" />
	<int:channel id="aggregateChannel"></int:channel>
	<int:aggregator input-channel="aggregateChannel"
		  output-channel="output" ref="amqpMessageAggregator" 
		  release-strategy="amqpMessageAggregator" release-strategy-method="release"
		  release-strategy-expression="size() == 2"
		 />
 -->
	  
	
	
	 <!-- 
	 *********************************** 
		 using the Service activator as the 'client for the 
		 what we will be testing is the response time of all service's  being call back at the same time versus the
		 sequential nature of the ws outbound adapter.
		 1 message processed by multiple services in paralell as apposed to sequentially by the webservice
		***********************************  
		--> 
	
    
    
    <!-- *********************************** 
		 mySQL CONNECTION SETUP To Handle logging from
		 the JDBC Out-bound Adapter.
	***********************************  --> 
	<!-- Initialise the mySQL db -->
	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="classpath:META-INF/mysql/db-schema.sql" />
	</jdbc:initialize-database>
 	<!-- Assign the db props placeholder -->
 	<bean 
 		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" >
				<value>classpath:META-INF/mysql/database.properties</value>  
		</property>
	</bean>
	
	<!-- Configure the datasource bean by wiring the db props into the data -->
	<bean id="dataSource" 
         class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="${jdbc.driverClassName}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- ******************************* -->
	<!-- Configure a SI outbound adpater to log each message time 
		Should be able to configure this to 
	-->
	
 
	<int-event:inbound-channel-adapter channel="eventChannel" 
								 error-channel="eventErrorChannel"
								event-types="org.springframework.web.context.support.ServletRequestHandledEvent"/> 
     <int:publish-subscribe-channel id="eventChannel"/>
     <int:channel id="eventErrorChannel"></int:channel>

	<!-- ****** CONFIGURE SOME SPEL EXPRESSIONS TO TRACK TIMES 
				AT VARIOUS HOPS IN THE ROUTE 
				***********
	 -->
	
	<!-- 
		This is an example of a captured event
		ServletRequestHandledEvent: url=[/pointofsale/amqp/1]; 
		client=[127.0.0.1]; method=[POST]; 
		servlet=[appServlet]; session=[null]; 
		user=[null]; time=[375ms];status=[OK]
		
		 lo_message_controller_time varchar(250), lo_message_controller_url
 	-->
 	
 	
  	<int-jdbc:outbound-channel-adapter
				id="jdbc-EventoutboundChannelAdapter"
				query="insert into lot_lu_loadtest_logger (
					    lo_message_start_time,
					    lo_message_controller_url,
					    lo_message_controller_time)
		    	values (:headers[timestamp],
		    			:url,
		    			:time)"
		    	data-source="dataSource" channel="eventChannel"
				sql-parameter-source-factory="spelSource" />

		<bean id="spelSource"
		      class="org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory">
		    <property name="parameterExpressions">
		        <map>
		            <entry key="createdDate" value="T(java.lang.System).currentTimeMillis()" />
		            <entry key="url" value="payload.getRequestUrl()" />
		            <entry key="time" value="payload.getProcessingTimeMillis()" />
		            </map>
		    </property>
		</bean>

<!-- 
	
+<bean id="spelSource" 	
+      class="o.s.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory">	
+    <property name="parameterExpressions">
+        <map>	
+            <entry key="id"          value="headers['id'].toString()"/>
+            <entry key="createdDate" value="new java.util.Date()"/>
+            <entry key="payload"     value="payload"/>
+        </map>	
+    </property>
 -->
		



		
			<!-- 
			* out bound adapter.
			*/
			-->
			<!--
			<int-jdbc:outbound-channel-adapter
			id="jdbc-AMQPoutboundChannelAdapter"
			query="insert into lot_lu_loadtest_logger (
				    lo_message_start_time, 
				    lo_message_test_id, 
				    lo_message_channel, 
				    lo_message_service,
				    lo_message_timestamp)
   		values (:headers[timestamp],
   				:headers[message_test_id],
   				:headers[message_source], 
   				:headers[message_service], 
   				:createdDate)"
			data-source="dataSource" channel="fromRabbit_"
			sql-parameter-source-factory="spelSource" />
			
				 -->
		<int-jdbc:outbound-channel-adapter
		id="jdbc-WSoutboundChannelAdapter"
		query="insert into lot_lu_loadtest_logger (
			    lo_message_start_time, 
			    lo_message_test_id, 
			    lo_message_channel, 
			    lo_message_service,
			    lo_message_timestamp)
    	values (:headers[timestamp],
    			:headers[message_test_id],
    			:headers[message_source], 
    			:headers[message_service], 
    			:createdDate)"
		data-source="dataSource" channel="output"
		sql-parameter-source-factory="spelSource" />
		
		<int-jdbc:outbound-gateway
		id="jdbc-OutboundGateway"
		update="insert into lot_lu_loadtest_logger (
			    lo_message_start_time, 
			    lo_message_test_id, 
			    lo_message_channel, 
			    lo_message_service,
			    lo_message_timestamp)
    	values (:headers[timestamp],
    			:headers[message_test_id],
    			:headers[message_source], 
    			:headers[message_service], 
    			'test12')"
		data-source="dataSource" 
		request-channel="fromRabbit.epos.loyalty, fromRabbit.epos.creditcard" 
		reply-channel="output"
		/>
		

	<!-- ******************************* -->
	<!-- Configure a SI outbound adpater to log each message time -->
    
<!-- *********************************** 
		END  mySQL CONNECTION SETUP 
	***********************************  --> 


<!-- *********************************** 
		SET OF Consoler Out Adapter for testing etc
	*******************************  --> 
		
	<!--
	  <int-stream:stdout-channel-adapter id="consoleOutTest" channel="fromRabbit" append-newline="true" />
	-->
 <!-- *********************************** 
		End of Console-Out Adapter for testing etc 
	***********************************  --> 
	
	
	<!-- *********************************** 
		SETUP OF WEB SERIVCEC ADAPTERS THROUGH
		SPRING INTEGRATION 
	***********************************  --> 
 
	<!-- Setup of Web Service through Spring Integration -->
	
	<!-- access web service using spring integration -->
	<!-- Need to work this section out as need to write the JAXB elements to the 
		CloudFoundry Webservices -->
	<oxm:jaxb2-marshaller id="marshaller" contextPath="ie.cit.cloud.pointofsale" /> 
	<int:channel id="input" />
	<int:channel id="output" />
	
	<int-stream:stdout-channel-adapter
		id="consoleOutEvent" 
		channel="eventChannel" 
		append-newline="true" 
	/>
	
	<int-stream:stdout-channel-adapter
		id="consoleInput" 
		channel="input" 
		append-newline="true" 
	/>
	<int-stream:stdout-channel-adapter
		id="consoleOutPutEvent" 
		channel="output" 
		append-newline="true" 
	/>
		<int-stream:stdout-channel-adapter
		id="consoleOutEventError" 
		channel="eventErrorChannel" 
		append-newline="true" 
	/>
	 

<!--##############################################-->
<!-- Request message routing to OpenEx. -->
<!--##############################################-->
<!--  ****** LOCAL CONFIG ***** -->
<!--   
	<int-ws:outbound-gateway id="marshallingGateway"
		request-channel="input"
		reply-channel="output" 
		uri="http://localhost:8080/{message_service}/baskets" 
		marshaller="marshaller"
		unmarshaller="marshaller">
		<int-ws:uri-variable name="message_service" expression="headers.message_service"/>
	</int-ws:outbound-gateway>
 -->
<!--  ****** Cloudfoundry Config CONFIG ***** -->

	<int-ws:outbound-gateway id="marshallingGateway"
		request-channel="input"
		reply-channel="output" 
		uri="http://{message_service}.cloudfoundry.com/{message_service}/baskets" 
		marshaller="marshaller"
		unmarshaller="marshaller"
		>
		<int-ws:uri-variable name="message_service" expression="headers.message_service"/>
		</int-ws:outbound-gateway>
		
		
</beans>
