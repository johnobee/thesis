<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:int-ws="http://www.springframework.org/schema/integration/ws"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cloud="http://schema.cloudfoundry.org/spring"
	xmlns:int-event="http://www.springframework.org/schema/integration/event"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/integration/ws http://www.springframework.org/schema/integration/ws/spring-integration-ws.xsd
		http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd
	    http://www.springframework.org/schema/integration/jdbc http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc.xsd
	    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
	    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	    http://schema.cloudfoundry.org/spring http://schema.cloudfoundry.org/spring/cloudfoundry-spring.xsd
	    http://www.springframework.org/schema/integration/event http://www.springframework.org/schema/integration/event/spring-integration-event.xsd">
	    
	    
	    
	<import resource="jdbc-integration.xml"/>
	<import resource="rabbit-integration.xml"/>

	<context:component-scan base-package="ie.cit.cloud.mvc" />
		
	<int:annotation-config/>
	

	<!-- sending messages -->
	<int:channel id="toRabbit"></int:channel>
	<int-amqp:outbound-channel-adapter id="amqp-outbound-adapter" amqp-template="amqpTemplate"
	exchange-name="epos.main.exchange.fanout" channel="toRabbit" 
	routing-key="epos.main.exchange.fanout"
	mapped-request-headers="message_*, __*, amqp_*"
	/>
	
	<int:channel id="fromAMQP"/> 
	<int-stream:stdout-channel-adapter id="consoleInput" 
	channel="fromAMQP" 
	append-newline="true" 
	/>


 <!--################################################	
	 SET UP OF MARSHALLERS REQUIRED FOR THE MESSAGING 	
	 INFRASTRUCTURE AND THEN LEADS INTO THE THE 3RD PARTY WEB SERVICE CALLS 
 	#################################################-->

	 <bean id="marshallingMessageConverter" class="org.springframework.amqp.support.converter.MarshallingMessageConverter">
	 		<property name="marshaller" ref="marshaller" />
	 		<property name="unmarshaller" ref="marshaller" />
	 </bean>
	 
	 <oxm:jaxb2-marshaller id="marshaller" contextPath="ie.cit.cloud.pointofsale"> 
	</oxm:jaxb2-marshaller>
	 <!-- access web service using spring integration -->
	 <!-- The JAXB elements to the can either scan the entire path such as : contextPath="ie.cit.cloud.pointofsale"
		OR 
		specify the individual classes to be bound
		<oxm:class-to-be-bound name="ie.cit.cloud.pointofsale.SalesTransactionRequest"/>
	    <oxm:class-to-be-bound name="ie.cit.cloud.pointofsale.LoyaltyResponse"/>
	    <oxm:class-to-be-bound name="ie.cit.cloud.pointofsale.CreditcardResponse"/>
	    <oxm:class-to-be-bound name="ie.cit.cloud.pointofsale.VoucherResponse"/>
	    <oxm:class-to-be-bound name="ie.cit.cloud.pointofsale.PromotionResponse"/>
		 -->




 <!--################################################
	 SET UP OF AMQP ADAPTERS AND CHANNELS TO SUPPORT THE 
	 VARRIOUS CALLS TO THE EXTERNAL WEBSERVICES 	
	 INFRASTRUCTURE AND THEN LEADS INTO THE THE 3RD PARTY WEB SERVICE CALLS
	 #################################################-->


	<!-- Receiving messages from queues 
		These are then passed to a SI outbound web service adapter
		Before this can happen however, they need to be converted
		form Text to a Java object (handled by marshallingMessageConverter)
		This can simply be repeated for each Outbound Webservice as required
		thus making the application very scalable


	Access messages from the Fanout Exchange using and AMQP inbound adapter
	This message is then passed to the outbound LOYALTY WS adapter
	
	THis is simply replictated for each service attached to the exchange.
	 -->

	<int-amqp:inbound-channel-adapter id="fromRabbit_loyalty_adapter"
	channel="fromRabbit_loyalty" 
	queue-names="epos.loyalty" 
	connection-factory="connectionFactory"  
	mapped-request-headers="message_*, __*, amqp_*"
	message-converter="marshallingMessageConverter"
	error-channel="eventErrorChannel"
	/>
		<int:publish-subscribe-channel id="fromRabbit_loyalty"/>
		<int-ws:outbound-gateway id="loyaltyGateway"
			uri="http://loyalty.cloudfoundry.com/loyalty/baskets" marshaller="marshaller" unmarshaller="marshaller"
			request-channel="fromRabbit_loyalty"
			reply-channel="fromLoyaltyWS"		
		/> 
			<!-- Need to converter the object response from the Web Service Outbound adapter back 
				to a json message as we will be handing it onto the Aggregator pattern which is expect a text/plain object 
				from the original AMQP fan-out exhange headers and message conversion.
				THis is repeated for each of the services attached to the exchange
			 -->
			 
			<int:channel id="fromLoyaltyWS" />
			<int:object-to-json-transformer id="fromLoyaltyWSObjecttoJSON"
			input-channel="fromLoyaltyWS" 
			output-channel="aggregateChannel" />
			
	

		
	
	<int-amqp:inbound-channel-adapter 
	id="fromRabbit_creditcard_adapter"
	channel="fromRabbit_creditcard"
	queue-names="epos.creditcard" 
	connection-factory="connectionFactory"  
	mapped-request-headers="message_*, __*, amqp_*"	
	message-converter="marshallingMessageConverter"
	error-channel="eventErrorChannel"
	/>
			<int:channel id="fromRabbit_creditcard"/>
			<int-ws:outbound-gateway id="creditcardGateway"
				uri="http://creditcard.cloudfoundry.com/creditcard/baskets" marshaller="marshaller" 
				request-channel="fromRabbit_creditcard"
				reply-channel="fromCreditcardWS" 
			/> 

				<int:channel id="fromCreditcardWS" />
				<int:object-to-json-transformer id="fromCreditCardWSObjecttoJSON"
				input-channel="fromCreditcardWS" 
				output-channel="aggregateChannel" />
	
	
	  
	<int-amqp:inbound-channel-adapter 
	id="fromRabbit_promotion_adapter"
	channel="fromRabbit_promotion"
	queue-names="epos.promotion" 
	connection-factory="connectionFactory"  
	mapped-request-headers="message_*, __*, amqp_*"
	message-converter="marshallingMessageConverter"
	error-channel="eventErrorChannel"
	/>
			<int:channel id="fromRabbit_promotion"/>
			<int-ws:outbound-gateway id="promotionGateway"
				uri="http://promotion.cloudfoundry.com/promotion/baskets" marshaller="marshaller" unmarshaller="marshaller"
				request-channel="fromRabbit_promotion"
				reply-channel="fromPromotionWS" 
			/> 
	
					<int:channel id="fromPromotionWS" />
					<int:object-to-json-transformer id="fromPromotionWSObjecttoJSON"
					input-channel="fromPromotionWS" 
					output-channel="aggregateChannel" />
	
 
	<int-amqp:inbound-channel-adapter 
	id="fromRabbit_voucher_adapter"
	channel="fromRabbit_voucher"
	queue-names="epos.voucher" 
	connection-factory="connectionFactory"  
	mapped-request-headers="message_*, __*, amqp_*"
	message-converter="marshallingMessageConverter"
	error-channel="eventErrorChannel"
	/>
			<int:channel id="fromRabbit_voucher"/>
			<int-ws:outbound-gateway id="voucherGateway"
				uri="http://voucher.cloudfoundry.com/voucher/baskets" 
				marshaller="marshaller" unmarshaller="marshaller"
				request-channel="fromRabbit_voucher"
				reply-channel="fromVoucherWS" 
			/> 
					<int:publish-subscribe-channel id="fromVoucherWS" />
					<int:object-to-json-transformer id="fromVoucherWSObjecttoJSON"
					input-channel="fromVoucherWS" 
					output-channel="aggregateChannel" />
	
	
<!--##############################################
	 SET UP OF AGGREGATOR PATTERN
	##############################################-->
	 
	<int:channel id="aggregateChannel"/>
	<int:aggregator input-channel="aggregateChannel"
		  output-channel="aggregateChannelOutput" 
		  release-strategy-expression="size() == 4"
		  correlation-strategy-expression="headers['amqp_receivedRoutingKey']"
		  send-partial-result-on-expiry="false"
		  discard-channel="eventErrorChannel" 
		  send-timeout="2000"
		  expire-groups-upon-completion="true"
		 />
		 
		 <!-- Simple call to outbound JDBC adapter to log the point at which all WebServices are
		 released by the aggregator pattern -->
		 
		<int:publish-subscribe-channel id="aggregateChannelOutput"/>
		<int-stream:stdout-channel-adapter id="aggregatestdOutput" channel="aggregateChannelOutput" append-newline="true" />
	

	 	
	 	
	
<!--##############################################
	 SET UP OF EVENT CHANNEL TO LOG MVC CONTROLLER EVENT 
	##############################################-->
	
	<int-event:inbound-channel-adapter 
								channel="eventChannel" 
								error-channel="eventErrorChannel"
								event-types="org.springframework.web.context.support.ServletRequestHandledEvent"/> 
     <int:publish-subscribe-channel id="eventChannel"/>
     <int:channel id="eventErrorChannel"></int:channel>
	 <int-stream:stdout-channel-adapter
		id="consoleOutPutEvent" 
		channel="eventErrorChannel" 
		append-newline="true" 
	 />

	 <int-jdbc:outbound-channel-adapter
	 	id="jdbc-EventoutboundChannelAdapter"
	 	query="insert into lot_lu_loadtest_logger (
				     	lo_db_create_time,
				     	lo_message_start_time, 
					    lo_message_test_id, 
					    lo_message_channel, 
					    lo_message_service,
					    lo_message_timestamp,
					    lo_message_controller_time,
					    lo_message_controller_url )
		    	values (EXTRACT(EPOCH FROM date_trunc('milliseconds', statement_timestamp()) AT TIME ZONE 'UTC') * 1000,
		    			:headers[message_starttime],
		    			:headers[message_test_id],
		    			'event', 
		    			:headers[message_service],
		    			:headers[timestamp],
		    			:eventUrlTime,
    					:eventUrl)"
	 	data-source="dataSource" channel="eventChannel"
	 	sql-parameter-source-factory="spelSource" />


	 <!-- 
#################################################################
		Spring Expression Setup for Dynmaically passing
		SPEL's into our SQL statements. This is particularly helpful for accessing 
		the MVC Controller Servlet Event payload to detemrine timings of Web services and AMQP processing times.
######################################################################
 -->

		

		<bean id="spelSource"
		      class="org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory">
		    <property name="parameterExpressions">
		        <map>
		       
		            <entry key="systimestamp" value="T(java.lang.System).currentTimeMillis()" />
		            <entry key="eventUrlTime" value="payload.getProcessingTimeMillis()" />
		            <entry key="eventUrl" value="payload.getRequestUrl()" />
		            </map>
		    </property>
		</bean>
		
		
<!--##############################################
	 SET UP OF LOGGER FOR WebServices Implementation 
	##############################################-->

		<int-jdbc:outbound-channel-adapter
			id="jdbc-WSoutboundChannelAdapter"
			query="insert into lot_lu_loadtest_logger (
			    lo_db_create_time,
				lo_message_start_time,  
			    lo_message_test_id, 
			    lo_message_channel, 
			    lo_message_service,
			    lo_message_timestamp)
    	values  (EXTRACT(EPOCH FROM date_trunc('milliseconds', statement_timestamp()) AT TIME ZONE 'UTC') * 1000,
		    	:headers[message_starttime],    	
    			:headers[message_test_id],
    			:headers[message_source], 
    			:headers[message_service],
    			:headers[timestamp])"
			data-source="dataSource" channel="webSevicesOutputChannel"
			sql-parameter-source-factory="spelSource" />

		<!--##############################################
	SET UP OF LOGGER FOR AMQP (which uses aggregator pattern) Implementation 
	##############################################-->
		
		<int-jdbc:outbound-channel-adapter
			id="jdbc-AMQPoutboundChannelAdapter"
			query="insert into lot_lu_loadtest_logger (
			    lo_db_create_time,
			    lo_message_start_time, 
			    lo_message_test_id, 
			    lo_message_channel, 
			    lo_message_service,
			    lo_message_timestamp)
    	values (EXTRACT(EPOCH FROM date_trunc('milliseconds', statement_timestamp()) AT TIME ZONE 'UTC') * 1000,
		    	:headers[message_starttime],    	
    			:headers[message_test_id],
    			:headers[message_source], 
    			:headers[message_service],
    			:headers[timestamp])"
			data-source="dataSource" channel="aggregateChannelOutput"
			sql-parameter-source-factory="spelSource" />

		<!--##############################################
	FUTURE WORK
	
	COULD SET UP LOGGING HERE FOR EACH OF THE AQMP ADAPTERS 
	(which uses aggregator pattern) Implementation 
	##############################################-->
		<!-- 
		<int-jdbc:outbound-gateway
		id="jdbc-AMQPoutboundChannelAdapter"
		update="insert into lot_lu_loadtest_logger (
			    lo_message_test_id, 
			    lo_message_channel, 
			    lo_message_service,
			    lo_message_timestamp)
    	values (:headers[message_test_id],
    			:headers[message_source], 
    			:headers[message_service],
    			:headers[timestamp])"    			
    	data-source="dataSource" request-channel="fromVoucherWS" reply-channel="" />

 -->
 

<!--##############################################
	 OUTBOUND WEBSERVICE ADAPTER SETUP 
	##############################################-->

	<int:channel id="webSevicesInputChannel" />	
	<int:channel id="webSevicesOutputChannel" />
	<int-ws:outbound-gateway id="marshallingGateway"
		request-channel="webSevicesInputChannel"
		reply-channel="webSevicesOutputChannel" 
		uri="http://{message_service}.cloudfoundry.com/{message_service}/baskets" 
		marshaller="marshaller"
		unmarshaller="marshaller"
		>
		<!--  This following section shoudl be put in the final report as it is a 
			very useful feature in Spring Integraiton as it allows for the 
			interrogation of messages headers/payload using Spring Expression Language -->
		<int-ws:uri-variable name="message_service" expression="headers.message_service"/>
		</int-ws:outbound-gateway>
</beans>
