package ie.cit.cloud.mvc.service.amqp;
 
import java.util.List;

import org.apache.log4j.Logger;

import ie.cit.cloud.pointofsale.SalesTransactionRequest;
import org.springframework.integration.Message;
import org.springframework.integration.core.MessagingTemplate;
import org.springframework.integration.support.MessageBuilder;
/**
 *  Consolidates all messages before sending them to the next 
 *  process. In our case, the next process is a web service call.
 *  <p>
 *  This aggregator has the following behavior:
 *  <pre>
 *  1. Correlates messages based on the correlation id.
 *  The correlation id is auto-generated by Spring. 
 *  
 *  2. Messages are released once all the total messages have reached
 *  the total sequence size. The sequence size is  auto-generated by Spring. 
 *  
 *  3. Once released, the messages are added to a Record instance which
 *  is added to an instance of AddListRequest. This AddListRequest is the final
 *  message we send to the web service. JAXB will marshall this object to XML
 *  before sending to an external web service.
 *  </pre>
 *  @author Krams at {@link http://krams915@blogspot.com}
 */
public class amqpMessageAggregator {
 
 protected static Logger logger = Logger.getLogger("integration");
 
 /*

 @SuppressWarnings("unchecked")
		
 public messageSend (SalesTransactionRequest ) {
  logger.debug("Total messages to send: " + reqlist.size()); 
   
  SalesTransactionResponse request = new SalesTransactionResponse();
	Message<SalesTransactionRequest> message = MessageBuilder.withPayload(transationBasket)
     return message;
 }

 */
 
 public boolean release(List<Message<?>> messages) {
  logger.debug("Message size: " + messages.size());
  logger.debug("Sequence size: " + messages.get(0).getHeaders().getSequenceSize());
   
  if (messages.size() == messages.get(0).getHeaders().getSequenceSize()) {
   logger.debug("Now releasing ...");
   return true;
  }
     logger.debug("Pending release ...");
     return false;
   }
  
 public String correlate(Message<?> message) {
  logger.debug("Correlate by: " + message.getHeaders().getCorrelationId().toString());
  return message.getHeaders().getCorrelationId().toString();
 }
}